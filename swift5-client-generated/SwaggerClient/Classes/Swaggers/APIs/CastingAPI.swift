//
// CastingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CastingAPI {
    /**
     * enum for parameter prefer
     */
    public enum Prefer_castingDelete: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func castingDelete(castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil, prefer: Prefer_castingDelete? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        castingDeleteWithRequestBuilder(castingId: castingId, characterId: characterId, actorCharacteristicsChoices: actorCharacteristicsChoices, prefer: prefer).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /casting
     - 

     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func castingDeleteWithRequestBuilder(castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil, prefer: Prefer_castingDelete? = nil) -> RequestBuilder<Void> {
        let path = "/casting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "casting_id": castingId, 
                        "character_id": characterId, 
                        "actor_characteristics_choices": actorCharacteristicsChoices
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_castingGet: String { 
        case count&#x3D;none = "count=none"
    }

    /**

     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func castingGet(castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_castingGet? = nil, completion: @escaping ((_ data: [Casting]?,_ error: Error?) -> Void)) {
        castingGetWithRequestBuilder(castingId: castingId, characterId: characterId, actorCharacteristicsChoices: actorCharacteristicsChoices, select: select, order: order, range: range, rangeUnit: rangeUnit, offset: offset, limit: limit, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /casting
     - 

     - examples: [{contentType=application/json, example=[ {
  "actor_characteristics_choices" : "actor_characteristics_choices",
  "character_id" : 6,
  "casting_id" : 0
}, {
  "actor_characteristics_choices" : "actor_characteristics_choices",
  "character_id" : 6,
  "casting_id" : 0
} ]}]
     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<[Casting]> 
     */
    open class func castingGetWithRequestBuilder(castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_castingGet? = nil) -> RequestBuilder<[Casting]> {
        let path = "/casting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "casting_id": castingId, 
                        "character_id": characterId, 
                        "actor_characteristics_choices": actorCharacteristicsChoices, 
                        "select": select, 
                        "order": order, 
                        "offset": offset, 
                        "limit": limit
        ])
        let nillableHeaders: [String: Any?] = [
                        "Range": range,
                        "Range-Unit": rangeUnit,
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Casting]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_castingPatch: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter body: (body) casting (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func castingPatch(body: Casting? = nil, prefer: Prefer_castingPatch? = nil, castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        castingPatchWithRequestBuilder(body: body, prefer: prefer, castingId: castingId, characterId: characterId, actorCharacteristicsChoices: actorCharacteristicsChoices).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /casting
     - 

     - parameter body: (body) casting (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter castingId: (query)  (optional)
     - parameter characterId: (query)  (optional)
     - parameter actorCharacteristicsChoices: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func castingPatchWithRequestBuilder(body: Casting? = nil, prefer: Prefer_castingPatch? = nil, castingId: String? = nil, characterId: String? = nil, actorCharacteristicsChoices: String? = nil) -> RequestBuilder<Void> {
        let path = "/casting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "casting_id": castingId, 
                        "character_id": characterId, 
                        "actor_characteristics_choices": actorCharacteristicsChoices
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_castingPost: String { 
        case return&#x3D;representation = "return=representation"
        case return&#x3D;minimal = "return=minimal"
        case return&#x3D;none = "return=none"
        case resolution&#x3D;ignoreDuplicates = "resolution=ignore-duplicates"
        case resolution&#x3D;mergeDuplicates = "resolution=merge-duplicates"
    }

    /**

     - parameter body: (body) casting (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func castingPost(body: Casting? = nil, prefer: Prefer_castingPost? = nil, select: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        castingPostWithRequestBuilder(body: body, prefer: prefer, select: select).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /casting
     - 

     - parameter body: (body) casting (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func castingPostWithRequestBuilder(body: Casting? = nil, prefer: Prefer_castingPost? = nil, select: String? = nil) -> RequestBuilder<Void> {
        let path = "/casting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "select": select
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
