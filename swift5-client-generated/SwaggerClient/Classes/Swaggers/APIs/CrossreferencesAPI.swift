//
// CrossreferencesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CrossreferencesAPI {
    /**
     * enum for parameter prefer
     */
    public enum Prefer_crossreferencesDelete: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crossreferencesDelete(crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil, prefer: Prefer_crossreferencesDelete? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        crossreferencesDeleteWithRequestBuilder(crossReferenceId: crossReferenceId, sceneId: sceneId, referencedSceneId: referencedSceneId, _description: _description, prefer: prefer).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /crossreferences
     - 

     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func crossreferencesDeleteWithRequestBuilder(crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil, prefer: Prefer_crossreferencesDelete? = nil) -> RequestBuilder<Void> {
        let path = "/crossreferences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cross_reference_id": crossReferenceId, 
                        "scene_id": sceneId, 
                        "referenced_scene_id": referencedSceneId, 
                        "description": _description
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_crossreferencesGet: String { 
        case count&#x3D;none = "count=none"
    }

    /**

     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crossreferencesGet(crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_crossreferencesGet? = nil, completion: @escaping ((_ data: [Crossreferences]?,_ error: Error?) -> Void)) {
        crossreferencesGetWithRequestBuilder(crossReferenceId: crossReferenceId, sceneId: sceneId, referencedSceneId: referencedSceneId, _description: _description, select: select, order: order, range: range, rangeUnit: rangeUnit, offset: offset, limit: limit, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /crossreferences
     - 

     - examples: [{contentType=application/json, example=[ {
  "referenced_scene_id" : 1,
  "cross_reference_id" : 0,
  "scene_id" : 6,
  "description" : "description"
}, {
  "referenced_scene_id" : 1,
  "cross_reference_id" : 0,
  "scene_id" : 6,
  "description" : "description"
} ]}]
     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<[Crossreferences]> 
     */
    open class func crossreferencesGetWithRequestBuilder(crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_crossreferencesGet? = nil) -> RequestBuilder<[Crossreferences]> {
        let path = "/crossreferences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cross_reference_id": crossReferenceId, 
                        "scene_id": sceneId, 
                        "referenced_scene_id": referencedSceneId, 
                        "description": _description, 
                        "select": select, 
                        "order": order, 
                        "offset": offset, 
                        "limit": limit
        ])
        let nillableHeaders: [String: Any?] = [
                        "Range": range,
                        "Range-Unit": rangeUnit,
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Crossreferences]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_crossreferencesPatch: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter body: (body) crossreferences (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crossreferencesPatch(body: Crossreferences? = nil, prefer: Prefer_crossreferencesPatch? = nil, crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        crossreferencesPatchWithRequestBuilder(body: body, prefer: prefer, crossReferenceId: crossReferenceId, sceneId: sceneId, referencedSceneId: referencedSceneId, _description: _description).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /crossreferences
     - 

     - parameter body: (body) crossreferences (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter crossReferenceId: (query)  (optional)
     - parameter sceneId: (query)  (optional)
     - parameter referencedSceneId: (query)  (optional)
     - parameter _description: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func crossreferencesPatchWithRequestBuilder(body: Crossreferences? = nil, prefer: Prefer_crossreferencesPatch? = nil, crossReferenceId: String? = nil, sceneId: String? = nil, referencedSceneId: String? = nil, _description: String? = nil) -> RequestBuilder<Void> {
        let path = "/crossreferences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cross_reference_id": crossReferenceId, 
                        "scene_id": sceneId, 
                        "referenced_scene_id": referencedSceneId, 
                        "description": _description
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_crossreferencesPost: String { 
        case return&#x3D;representation = "return=representation"
        case return&#x3D;minimal = "return=minimal"
        case return&#x3D;none = "return=none"
        case resolution&#x3D;ignoreDuplicates = "resolution=ignore-duplicates"
        case resolution&#x3D;mergeDuplicates = "resolution=merge-duplicates"
    }

    /**

     - parameter body: (body) crossreferences (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func crossreferencesPost(body: Crossreferences? = nil, prefer: Prefer_crossreferencesPost? = nil, select: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        crossreferencesPostWithRequestBuilder(body: body, prefer: prefer, select: select).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /crossreferences
     - 

     - parameter body: (body) crossreferences (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func crossreferencesPostWithRequestBuilder(body: Crossreferences? = nil, prefer: Prefer_crossreferencesPost? = nil, select: String? = nil) -> RequestBuilder<Void> {
        let path = "/crossreferences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "select": select
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
