//
// CharacterrelationshipAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CharacterrelationshipAPI {
    /**
     * enum for parameter prefer
     */
    public enum Prefer_characterrelationshipDelete: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func characterrelationshipDelete(relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil, prefer: Prefer_characterrelationshipDelete? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        characterrelationshipDeleteWithRequestBuilder(relationshipId: relationshipId, character1Id: character1Id, character2Id: character2Id, relationshipType: relationshipType, prefer: prefer).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /characterrelationship
     - 

     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func characterrelationshipDeleteWithRequestBuilder(relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil, prefer: Prefer_characterrelationshipDelete? = nil) -> RequestBuilder<Void> {
        let path = "/characterrelationship"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "relationship_id": relationshipId, 
                        "character1_id": character1Id, 
                        "character2_id": character2Id, 
                        "relationship_type": relationshipType
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_characterrelationshipGet: String { 
        case count&#x3D;none = "count=none"
    }

    /**

     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func characterrelationshipGet(relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_characterrelationshipGet? = nil, completion: @escaping ((_ data: [Characterrelationship]?,_ error: Error?) -> Void)) {
        characterrelationshipGetWithRequestBuilder(relationshipId: relationshipId, character1Id: character1Id, character2Id: character2Id, relationshipType: relationshipType, select: select, order: order, range: range, rangeUnit: rangeUnit, offset: offset, limit: limit, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /characterrelationship
     - 

     - examples: [{contentType=application/json, example=[ {
  "character2_id" : 1,
  "relationship_type" : "relationship_type",
  "relationship_id" : 0,
  "character1_id" : 6
}, {
  "character2_id" : 1,
  "relationship_type" : "relationship_type",
  "relationship_id" : 0,
  "character1_id" : 6
} ]}]
     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<[Characterrelationship]> 
     */
    open class func characterrelationshipGetWithRequestBuilder(relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_characterrelationshipGet? = nil) -> RequestBuilder<[Characterrelationship]> {
        let path = "/characterrelationship"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "relationship_id": relationshipId, 
                        "character1_id": character1Id, 
                        "character2_id": character2Id, 
                        "relationship_type": relationshipType, 
                        "select": select, 
                        "order": order, 
                        "offset": offset, 
                        "limit": limit
        ])
        let nillableHeaders: [String: Any?] = [
                        "Range": range,
                        "Range-Unit": rangeUnit,
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Characterrelationship]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_characterrelationshipPatch: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter body: (body) characterrelationship (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func characterrelationshipPatch(body: Characterrelationship? = nil, prefer: Prefer_characterrelationshipPatch? = nil, relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        characterrelationshipPatchWithRequestBuilder(body: body, prefer: prefer, relationshipId: relationshipId, character1Id: character1Id, character2Id: character2Id, relationshipType: relationshipType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /characterrelationship
     - 

     - parameter body: (body) characterrelationship (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter relationshipId: (query)  (optional)
     - parameter character1Id: (query)  (optional)
     - parameter character2Id: (query)  (optional)
     - parameter relationshipType: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func characterrelationshipPatchWithRequestBuilder(body: Characterrelationship? = nil, prefer: Prefer_characterrelationshipPatch? = nil, relationshipId: String? = nil, character1Id: String? = nil, character2Id: String? = nil, relationshipType: String? = nil) -> RequestBuilder<Void> {
        let path = "/characterrelationship"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "relationship_id": relationshipId, 
                        "character1_id": character1Id, 
                        "character2_id": character2Id, 
                        "relationship_type": relationshipType
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_characterrelationshipPost: String { 
        case return&#x3D;representation = "return=representation"
        case return&#x3D;minimal = "return=minimal"
        case return&#x3D;none = "return=none"
        case resolution&#x3D;ignoreDuplicates = "resolution=ignore-duplicates"
        case resolution&#x3D;mergeDuplicates = "resolution=merge-duplicates"
    }

    /**

     - parameter body: (body) characterrelationship (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func characterrelationshipPost(body: Characterrelationship? = nil, prefer: Prefer_characterrelationshipPost? = nil, select: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        characterrelationshipPostWithRequestBuilder(body: body, prefer: prefer, select: select).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /characterrelationship
     - 

     - parameter body: (body) characterrelationship (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func characterrelationshipPostWithRequestBuilder(body: Characterrelationship? = nil, prefer: Prefer_characterrelationshipPost? = nil, select: String? = nil) -> RequestBuilder<Void> {
        let path = "/characterrelationship"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "select": select
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
