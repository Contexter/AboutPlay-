//
// ActAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ActAPI {
    /**
     * enum for parameter prefer
     */
    public enum Prefer_actDelete: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actDelete(actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil, prefer: Prefer_actDelete? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actDeleteWithRequestBuilder(actId: actId, scriptId: scriptId, actNumber: actNumber, synopsis: synopsis, notes: notes, prefer: prefer).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /act
     - 

     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func actDeleteWithRequestBuilder(actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil, prefer: Prefer_actDelete? = nil) -> RequestBuilder<Void> {
        let path = "/act"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "act_id": actId, 
                        "script_id": scriptId, 
                        "act_number": actNumber, 
                        "synopsis": synopsis, 
                        "notes": notes
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_actGet: String { 
        case count&#x3D;none = "count=none"
    }

    /**

     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actGet(actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_actGet? = nil, completion: @escaping ((_ data: [Act]?,_ error: Error?) -> Void)) {
        actGetWithRequestBuilder(actId: actId, scriptId: scriptId, actNumber: actNumber, synopsis: synopsis, notes: notes, select: select, order: order, range: range, rangeUnit: rangeUnit, offset: offset, limit: limit, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /act
     - 

     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "act_id" : 0,
  "script_id" : 6,
  "synopsis" : "synopsis",
  "act_number" : 1
}, {
  "notes" : "notes",
  "act_id" : 0,
  "script_id" : 6,
  "synopsis" : "synopsis",
  "act_number" : 1
} ]}]
     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter order: (query) Ordering (optional)
     - parameter range: (header) Limiting and Pagination (optional)
     - parameter rangeUnit: (header) Limiting and Pagination (optional, default to items)
     - parameter offset: (query) Limiting and Pagination (optional)
     - parameter limit: (query) Limiting and Pagination (optional)
     - parameter prefer: (header) Preference (optional)

     - returns: RequestBuilder<[Act]> 
     */
    open class func actGetWithRequestBuilder(actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil, select: String? = nil, order: String? = nil, range: String? = nil, rangeUnit: String? = nil, offset: String? = nil, limit: String? = nil, prefer: Prefer_actGet? = nil) -> RequestBuilder<[Act]> {
        let path = "/act"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "act_id": actId, 
                        "script_id": scriptId, 
                        "act_number": actNumber, 
                        "synopsis": synopsis, 
                        "notes": notes, 
                        "select": select, 
                        "order": order, 
                        "offset": offset, 
                        "limit": limit
        ])
        let nillableHeaders: [String: Any?] = [
                        "Range": range,
                        "Range-Unit": rangeUnit,
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Act]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_actPatch: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
        case _none = "return=none"
    }

    /**

     - parameter body: (body) act (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actPatch(body: Act? = nil, prefer: Prefer_actPatch? = nil, actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actPatchWithRequestBuilder(body: body, prefer: prefer, actId: actId, scriptId: scriptId, actNumber: actNumber, synopsis: synopsis, notes: notes).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /act
     - 

     - parameter body: (body) act (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter actId: (query)  (optional)
     - parameter scriptId: (query)  (optional)
     - parameter actNumber: (query)  (optional)
     - parameter synopsis: (query)  (optional)
     - parameter notes: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func actPatchWithRequestBuilder(body: Act? = nil, prefer: Prefer_actPatch? = nil, actId: String? = nil, scriptId: String? = nil, actNumber: String? = nil, synopsis: String? = nil, notes: String? = nil) -> RequestBuilder<Void> {
        let path = "/act"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "act_id": actId, 
                        "script_id": scriptId, 
                        "act_number": actNumber, 
                        "synopsis": synopsis, 
                        "notes": notes
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_actPost: String { 
        case return&#x3D;representation = "return=representation"
        case return&#x3D;minimal = "return=minimal"
        case return&#x3D;none = "return=none"
        case resolution&#x3D;ignoreDuplicates = "resolution=ignore-duplicates"
        case resolution&#x3D;mergeDuplicates = "resolution=merge-duplicates"
    }

    /**

     - parameter body: (body) act (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func actPost(body: Act? = nil, prefer: Prefer_actPost? = nil, select: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        actPostWithRequestBuilder(body: body, prefer: prefer, select: select).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /act
     - 

     - parameter body: (body) act (optional)
     - parameter prefer: (header) Preference (optional)
     - parameter select: (query) Filtering Columns (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func actPostWithRequestBuilder(body: Act? = nil, prefer: Prefer_actPost? = nil, select: String? = nil) -> RequestBuilder<Void> {
        let path = "/act"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "select": select
        ])
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
