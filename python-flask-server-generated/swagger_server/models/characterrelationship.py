# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Characterrelationship(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, relationship_id: int=None, character1_id: int=None, character2_id: int=None, relationship_type: str=None):  # noqa: E501
        """Characterrelationship - a model defined in Swagger

        :param relationship_id: The relationship_id of this Characterrelationship.  # noqa: E501
        :type relationship_id: int
        :param character1_id: The character1_id of this Characterrelationship.  # noqa: E501
        :type character1_id: int
        :param character2_id: The character2_id of this Characterrelationship.  # noqa: E501
        :type character2_id: int
        :param relationship_type: The relationship_type of this Characterrelationship.  # noqa: E501
        :type relationship_type: str
        """
        self.swagger_types = {
            'relationship_id': int,
            'character1_id': int,
            'character2_id': int,
            'relationship_type': str
        }

        self.attribute_map = {
            'relationship_id': 'relationship_id',
            'character1_id': 'character1_id',
            'character2_id': 'character2_id',
            'relationship_type': 'relationship_type'
        }
        self._relationship_id = relationship_id
        self._character1_id = character1_id
        self._character2_id = character2_id
        self._relationship_type = relationship_type

    @classmethod
    def from_dict(cls, dikt) -> 'Characterrelationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The characterrelationship of this Characterrelationship.  # noqa: E501
        :rtype: Characterrelationship
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relationship_id(self) -> int:
        """Gets the relationship_id of this Characterrelationship.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The relationship_id of this Characterrelationship.
        :rtype: int
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id: int):
        """Sets the relationship_id of this Characterrelationship.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param relationship_id: The relationship_id of this Characterrelationship.
        :type relationship_id: int
        """
        if relationship_id is None:
            raise ValueError("Invalid value for `relationship_id`, must not be `None`")  # noqa: E501

        self._relationship_id = relationship_id

    @property
    def character1_id(self) -> int:
        """Gets the character1_id of this Characterrelationship.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :return: The character1_id of this Characterrelationship.
        :rtype: int
        """
        return self._character1_id

    @character1_id.setter
    def character1_id(self, character1_id: int):
        """Sets the character1_id of this Characterrelationship.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :param character1_id: The character1_id of this Characterrelationship.
        :type character1_id: int
        """

        self._character1_id = character1_id

    @property
    def character2_id(self) -> int:
        """Gets the character2_id of this Characterrelationship.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :return: The character2_id of this Characterrelationship.
        :rtype: int
        """
        return self._character2_id

    @character2_id.setter
    def character2_id(self, character2_id: int):
        """Sets the character2_id of this Characterrelationship.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :param character2_id: The character2_id of this Characterrelationship.
        :type character2_id: int
        """

        self._character2_id = character2_id

    @property
    def relationship_type(self) -> str:
        """Gets the relationship_type of this Characterrelationship.


        :return: The relationship_type of this Characterrelationship.
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type: str):
        """Sets the relationship_type of this Characterrelationship.


        :param relationship_type: The relationship_type of this Characterrelationship.
        :type relationship_type: str
        """

        self._relationship_type = relationship_type
