# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Playwright(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, author_id: int=None, name: str=None, biography: str=None, contact_information: str=None):  # noqa: E501
        """Playwright - a model defined in Swagger

        :param author_id: The author_id of this Playwright.  # noqa: E501
        :type author_id: int
        :param name: The name of this Playwright.  # noqa: E501
        :type name: str
        :param biography: The biography of this Playwright.  # noqa: E501
        :type biography: str
        :param contact_information: The contact_information of this Playwright.  # noqa: E501
        :type contact_information: str
        """
        self.swagger_types = {
            'author_id': int,
            'name': str,
            'biography': str,
            'contact_information': str
        }

        self.attribute_map = {
            'author_id': 'author_id',
            'name': 'name',
            'biography': 'biography',
            'contact_information': 'contact_information'
        }
        self._author_id = author_id
        self._name = name
        self._biography = biography
        self._contact_information = contact_information

    @classmethod
    def from_dict(cls, dikt) -> 'Playwright':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The playwright of this Playwright.  # noqa: E501
        :rtype: Playwright
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_id(self) -> int:
        """Gets the author_id of this Playwright.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The author_id of this Playwright.
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: int):
        """Sets the author_id of this Playwright.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param author_id: The author_id of this Playwright.
        :type author_id: int
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def name(self) -> str:
        """Gets the name of this Playwright.


        :return: The name of this Playwright.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Playwright.


        :param name: The name of this Playwright.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def biography(self) -> str:
        """Gets the biography of this Playwright.


        :return: The biography of this Playwright.
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography: str):
        """Sets the biography of this Playwright.


        :param biography: The biography of this Playwright.
        :type biography: str
        """

        self._biography = biography

    @property
    def contact_information(self) -> str:
        """Gets the contact_information of this Playwright.


        :return: The contact_information of this Playwright.
        :rtype: str
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information: str):
        """Sets the contact_information of this Playwright.


        :param contact_information: The contact_information of this Playwright.
        :type contact_information: str
        """

        self._contact_information = contact_information
