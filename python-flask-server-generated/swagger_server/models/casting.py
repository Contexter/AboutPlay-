# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Casting(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, casting_id: int=None, character_id: int=None, actor_characteristics_choices: str=None):  # noqa: E501
        """Casting - a model defined in Swagger

        :param casting_id: The casting_id of this Casting.  # noqa: E501
        :type casting_id: int
        :param character_id: The character_id of this Casting.  # noqa: E501
        :type character_id: int
        :param actor_characteristics_choices: The actor_characteristics_choices of this Casting.  # noqa: E501
        :type actor_characteristics_choices: str
        """
        self.swagger_types = {
            'casting_id': int,
            'character_id': int,
            'actor_characteristics_choices': str
        }

        self.attribute_map = {
            'casting_id': 'casting_id',
            'character_id': 'character_id',
            'actor_characteristics_choices': 'actor_characteristics_choices'
        }
        self._casting_id = casting_id
        self._character_id = character_id
        self._actor_characteristics_choices = actor_characteristics_choices

    @classmethod
    def from_dict(cls, dikt) -> 'Casting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The casting of this Casting.  # noqa: E501
        :rtype: Casting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def casting_id(self) -> int:
        """Gets the casting_id of this Casting.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The casting_id of this Casting.
        :rtype: int
        """
        return self._casting_id

    @casting_id.setter
    def casting_id(self, casting_id: int):
        """Sets the casting_id of this Casting.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param casting_id: The casting_id of this Casting.
        :type casting_id: int
        """
        if casting_id is None:
            raise ValueError("Invalid value for `casting_id`, must not be `None`")  # noqa: E501

        self._casting_id = casting_id

    @property
    def character_id(self) -> int:
        """Gets the character_id of this Casting.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :return: The character_id of this Casting.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: int):
        """Sets the character_id of this Casting.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :param character_id: The character_id of this Casting.
        :type character_id: int
        """

        self._character_id = character_id

    @property
    def actor_characteristics_choices(self) -> str:
        """Gets the actor_characteristics_choices of this Casting.


        :return: The actor_characteristics_choices of this Casting.
        :rtype: str
        """
        return self._actor_characteristics_choices

    @actor_characteristics_choices.setter
    def actor_characteristics_choices(self, actor_characteristics_choices: str):
        """Sets the actor_characteristics_choices of this Casting.


        :param actor_characteristics_choices: The actor_characteristics_choices of this Casting.
        :type actor_characteristics_choices: str
        """

        self._actor_characteristics_choices = actor_characteristics_choices
