# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Crossreferences(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cross_reference_id: int=None, scene_id: int=None, referenced_scene_id: int=None, description: str=None):  # noqa: E501
        """Crossreferences - a model defined in Swagger

        :param cross_reference_id: The cross_reference_id of this Crossreferences.  # noqa: E501
        :type cross_reference_id: int
        :param scene_id: The scene_id of this Crossreferences.  # noqa: E501
        :type scene_id: int
        :param referenced_scene_id: The referenced_scene_id of this Crossreferences.  # noqa: E501
        :type referenced_scene_id: int
        :param description: The description of this Crossreferences.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'cross_reference_id': int,
            'scene_id': int,
            'referenced_scene_id': int,
            'description': str
        }

        self.attribute_map = {
            'cross_reference_id': 'cross_reference_id',
            'scene_id': 'scene_id',
            'referenced_scene_id': 'referenced_scene_id',
            'description': 'description'
        }
        self._cross_reference_id = cross_reference_id
        self._scene_id = scene_id
        self._referenced_scene_id = referenced_scene_id
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Crossreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The crossreferences of this Crossreferences.  # noqa: E501
        :rtype: Crossreferences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cross_reference_id(self) -> int:
        """Gets the cross_reference_id of this Crossreferences.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The cross_reference_id of this Crossreferences.
        :rtype: int
        """
        return self._cross_reference_id

    @cross_reference_id.setter
    def cross_reference_id(self, cross_reference_id: int):
        """Sets the cross_reference_id of this Crossreferences.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param cross_reference_id: The cross_reference_id of this Crossreferences.
        :type cross_reference_id: int
        """
        if cross_reference_id is None:
            raise ValueError("Invalid value for `cross_reference_id`, must not be `None`")  # noqa: E501

        self._cross_reference_id = cross_reference_id

    @property
    def scene_id(self) -> int:
        """Gets the scene_id of this Crossreferences.

        Note: This is a Foreign Key to `scene.scene_id`.<fk table='scene' column='scene_id'/>  # noqa: E501

        :return: The scene_id of this Crossreferences.
        :rtype: int
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id: int):
        """Sets the scene_id of this Crossreferences.

        Note: This is a Foreign Key to `scene.scene_id`.<fk table='scene' column='scene_id'/>  # noqa: E501

        :param scene_id: The scene_id of this Crossreferences.
        :type scene_id: int
        """

        self._scene_id = scene_id

    @property
    def referenced_scene_id(self) -> int:
        """Gets the referenced_scene_id of this Crossreferences.

        Note: This is a Foreign Key to `scene.scene_id`.<fk table='scene' column='scene_id'/>  # noqa: E501

        :return: The referenced_scene_id of this Crossreferences.
        :rtype: int
        """
        return self._referenced_scene_id

    @referenced_scene_id.setter
    def referenced_scene_id(self, referenced_scene_id: int):
        """Sets the referenced_scene_id of this Crossreferences.

        Note: This is a Foreign Key to `scene.scene_id`.<fk table='scene' column='scene_id'/>  # noqa: E501

        :param referenced_scene_id: The referenced_scene_id of this Crossreferences.
        :type referenced_scene_id: int
        """

        self._referenced_scene_id = referenced_scene_id

    @property
    def description(self) -> str:
        """Gets the description of this Crossreferences.


        :return: The description of this Crossreferences.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Crossreferences.


        :param description: The description of this Crossreferences.
        :type description: str
        """

        self._description = description
