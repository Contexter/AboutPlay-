# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Revisionhistory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, revision_id: int=None, script_id: int=None, _date: date=None, change_description: str=None, editor: str=None):  # noqa: E501
        """Revisionhistory - a model defined in Swagger

        :param revision_id: The revision_id of this Revisionhistory.  # noqa: E501
        :type revision_id: int
        :param script_id: The script_id of this Revisionhistory.  # noqa: E501
        :type script_id: int
        :param _date: The _date of this Revisionhistory.  # noqa: E501
        :type _date: date
        :param change_description: The change_description of this Revisionhistory.  # noqa: E501
        :type change_description: str
        :param editor: The editor of this Revisionhistory.  # noqa: E501
        :type editor: str
        """
        self.swagger_types = {
            'revision_id': int,
            'script_id': int,
            '_date': date,
            'change_description': str,
            'editor': str
        }

        self.attribute_map = {
            'revision_id': 'revision_id',
            'script_id': 'script_id',
            '_date': 'date',
            'change_description': 'change_description',
            'editor': 'editor'
        }
        self._revision_id = revision_id
        self._script_id = script_id
        self.__date = _date
        self._change_description = change_description
        self._editor = editor

    @classmethod
    def from_dict(cls, dikt) -> 'Revisionhistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The revisionhistory of this Revisionhistory.  # noqa: E501
        :rtype: Revisionhistory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def revision_id(self) -> int:
        """Gets the revision_id of this Revisionhistory.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The revision_id of this Revisionhistory.
        :rtype: int
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id: int):
        """Sets the revision_id of this Revisionhistory.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param revision_id: The revision_id of this Revisionhistory.
        :type revision_id: int
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")  # noqa: E501

        self._revision_id = revision_id

    @property
    def script_id(self) -> int:
        """Gets the script_id of this Revisionhistory.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :return: The script_id of this Revisionhistory.
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id: int):
        """Sets the script_id of this Revisionhistory.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :param script_id: The script_id of this Revisionhistory.
        :type script_id: int
        """

        self._script_id = script_id

    @property
    def _date(self) -> date:
        """Gets the _date of this Revisionhistory.


        :return: The _date of this Revisionhistory.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Revisionhistory.


        :param _date: The _date of this Revisionhistory.
        :type _date: date
        """

        self.__date = _date

    @property
    def change_description(self) -> str:
        """Gets the change_description of this Revisionhistory.


        :return: The change_description of this Revisionhistory.
        :rtype: str
        """
        return self._change_description

    @change_description.setter
    def change_description(self, change_description: str):
        """Sets the change_description of this Revisionhistory.


        :param change_description: The change_description of this Revisionhistory.
        :type change_description: str
        """

        self._change_description = change_description

    @property
    def editor(self) -> str:
        """Gets the editor of this Revisionhistory.


        :return: The editor of this Revisionhistory.
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor: str):
        """Sets the editor of this Revisionhistory.


        :param editor: The editor of this Revisionhistory.
        :type editor: str
        """

        self._editor = editor
