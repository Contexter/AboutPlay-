# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Extendednotesresearch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, research_id: int=None, script_id: int=None, notes: str=None, research_details: str=None):  # noqa: E501
        """Extendednotesresearch - a model defined in Swagger

        :param research_id: The research_id of this Extendednotesresearch.  # noqa: E501
        :type research_id: int
        :param script_id: The script_id of this Extendednotesresearch.  # noqa: E501
        :type script_id: int
        :param notes: The notes of this Extendednotesresearch.  # noqa: E501
        :type notes: str
        :param research_details: The research_details of this Extendednotesresearch.  # noqa: E501
        :type research_details: str
        """
        self.swagger_types = {
            'research_id': int,
            'script_id': int,
            'notes': str,
            'research_details': str
        }

        self.attribute_map = {
            'research_id': 'research_id',
            'script_id': 'script_id',
            'notes': 'notes',
            'research_details': 'research_details'
        }
        self._research_id = research_id
        self._script_id = script_id
        self._notes = notes
        self._research_details = research_details

    @classmethod
    def from_dict(cls, dikt) -> 'Extendednotesresearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The extendednotesresearch of this Extendednotesresearch.  # noqa: E501
        :rtype: Extendednotesresearch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def research_id(self) -> int:
        """Gets the research_id of this Extendednotesresearch.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The research_id of this Extendednotesresearch.
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id: int):
        """Sets the research_id of this Extendednotesresearch.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param research_id: The research_id of this Extendednotesresearch.
        :type research_id: int
        """
        if research_id is None:
            raise ValueError("Invalid value for `research_id`, must not be `None`")  # noqa: E501

        self._research_id = research_id

    @property
    def script_id(self) -> int:
        """Gets the script_id of this Extendednotesresearch.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :return: The script_id of this Extendednotesresearch.
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id: int):
        """Sets the script_id of this Extendednotesresearch.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :param script_id: The script_id of this Extendednotesresearch.
        :type script_id: int
        """

        self._script_id = script_id

    @property
    def notes(self) -> str:
        """Gets the notes of this Extendednotesresearch.


        :return: The notes of this Extendednotesresearch.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Extendednotesresearch.


        :param notes: The notes of this Extendednotesresearch.
        :type notes: str
        """

        self._notes = notes

    @property
    def research_details(self) -> str:
        """Gets the research_details of this Extendednotesresearch.


        :return: The research_details of this Extendednotesresearch.
        :rtype: str
        """
        return self._research_details

    @research_details.setter
    def research_details(self, research_details: str):
        """Sets the research_details of this Extendednotesresearch.


        :param research_details: The research_details of this Extendednotesresearch.
        :type research_details: str
        """

        self._research_details = research_details
