# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Scenelocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, location_id: int=None, description: str=None, historical_cultural_significance: str=None):  # noqa: E501
        """Scenelocation - a model defined in Swagger

        :param location_id: The location_id of this Scenelocation.  # noqa: E501
        :type location_id: int
        :param description: The description of this Scenelocation.  # noqa: E501
        :type description: str
        :param historical_cultural_significance: The historical_cultural_significance of this Scenelocation.  # noqa: E501
        :type historical_cultural_significance: str
        """
        self.swagger_types = {
            'location_id': int,
            'description': str,
            'historical_cultural_significance': str
        }

        self.attribute_map = {
            'location_id': 'location_id',
            'description': 'description',
            'historical_cultural_significance': 'historical_cultural_significance'
        }
        self._location_id = location_id
        self._description = description
        self._historical_cultural_significance = historical_cultural_significance

    @classmethod
    def from_dict(cls, dikt) -> 'Scenelocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The scenelocation of this Scenelocation.  # noqa: E501
        :rtype: Scenelocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_id(self) -> int:
        """Gets the location_id of this Scenelocation.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The location_id of this Scenelocation.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id: int):
        """Sets the location_id of this Scenelocation.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param location_id: The location_id of this Scenelocation.
        :type location_id: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def description(self) -> str:
        """Gets the description of this Scenelocation.


        :return: The description of this Scenelocation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Scenelocation.


        :param description: The description of this Scenelocation.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def historical_cultural_significance(self) -> str:
        """Gets the historical_cultural_significance of this Scenelocation.


        :return: The historical_cultural_significance of this Scenelocation.
        :rtype: str
        """
        return self._historical_cultural_significance

    @historical_cultural_significance.setter
    def historical_cultural_significance(self, historical_cultural_significance: str):
        """Sets the historical_cultural_significance of this Scenelocation.


        :param historical_cultural_significance: The historical_cultural_significance of this Scenelocation.
        :type historical_cultural_significance: str
        """

        self._historical_cultural_significance = historical_cultural_significance
