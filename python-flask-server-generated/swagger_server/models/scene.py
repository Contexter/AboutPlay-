# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Scene(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, scene_id: int=None, act_id: int=None, scene_number: int=None, synopsis: str=None, notes: str=None):  # noqa: E501
        """Scene - a model defined in Swagger

        :param scene_id: The scene_id of this Scene.  # noqa: E501
        :type scene_id: int
        :param act_id: The act_id of this Scene.  # noqa: E501
        :type act_id: int
        :param scene_number: The scene_number of this Scene.  # noqa: E501
        :type scene_number: int
        :param synopsis: The synopsis of this Scene.  # noqa: E501
        :type synopsis: str
        :param notes: The notes of this Scene.  # noqa: E501
        :type notes: str
        """
        self.swagger_types = {
            'scene_id': int,
            'act_id': int,
            'scene_number': int,
            'synopsis': str,
            'notes': str
        }

        self.attribute_map = {
            'scene_id': 'scene_id',
            'act_id': 'act_id',
            'scene_number': 'scene_number',
            'synopsis': 'synopsis',
            'notes': 'notes'
        }
        self._scene_id = scene_id
        self._act_id = act_id
        self._scene_number = scene_number
        self._synopsis = synopsis
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'Scene':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The scene of this Scene.  # noqa: E501
        :rtype: Scene
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scene_id(self) -> int:
        """Gets the scene_id of this Scene.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The scene_id of this Scene.
        :rtype: int
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id: int):
        """Sets the scene_id of this Scene.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param scene_id: The scene_id of this Scene.
        :type scene_id: int
        """
        if scene_id is None:
            raise ValueError("Invalid value for `scene_id`, must not be `None`")  # noqa: E501

        self._scene_id = scene_id

    @property
    def act_id(self) -> int:
        """Gets the act_id of this Scene.

        Note: This is a Foreign Key to `act.act_id`.<fk table='act' column='act_id'/>  # noqa: E501

        :return: The act_id of this Scene.
        :rtype: int
        """
        return self._act_id

    @act_id.setter
    def act_id(self, act_id: int):
        """Sets the act_id of this Scene.

        Note: This is a Foreign Key to `act.act_id`.<fk table='act' column='act_id'/>  # noqa: E501

        :param act_id: The act_id of this Scene.
        :type act_id: int
        """

        self._act_id = act_id

    @property
    def scene_number(self) -> int:
        """Gets the scene_number of this Scene.


        :return: The scene_number of this Scene.
        :rtype: int
        """
        return self._scene_number

    @scene_number.setter
    def scene_number(self, scene_number: int):
        """Sets the scene_number of this Scene.


        :param scene_number: The scene_number of this Scene.
        :type scene_number: int
        """
        if scene_number is None:
            raise ValueError("Invalid value for `scene_number`, must not be `None`")  # noqa: E501

        self._scene_number = scene_number

    @property
    def synopsis(self) -> str:
        """Gets the synopsis of this Scene.


        :return: The synopsis of this Scene.
        :rtype: str
        """
        return self._synopsis

    @synopsis.setter
    def synopsis(self, synopsis: str):
        """Sets the synopsis of this Scene.


        :param synopsis: The synopsis of this Scene.
        :type synopsis: str
        """

        self._synopsis = synopsis

    @property
    def notes(self) -> str:
        """Gets the notes of this Scene.


        :return: The notes of this Scene.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Scene.


        :param notes: The notes of this Scene.
        :type notes: str
        """

        self._notes = notes
